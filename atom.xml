<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Development Blog]]></title>
  <link href="http://kirang89.github.com/atom.xml" rel="self"/>
  <link href="http://kirang89.github.com/"/>
  <updated>2013-03-04T19:45:13+05:30</updated>
  <id>http://kirang89.github.com/</id>
  <author>
    <name><![CDATA[Kiran Gangadharan]]></name>
    <email><![CDATA[kiran.daredevil@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Type and Object in Python]]></title>
    <link href="http://kirang89.github.com/blog/2013/03/04/type-and-object-in-python/"/>
    <updated>2013-03-04T19:17:00+05:30</updated>
    <id>http://kirang89.github.com/blog/2013/03/04/type-and-object-in-python</id>
    <content type="html"><![CDATA[<p>Recently I stumbled across an article talking about the importance of understanding <code>type</code> and <code>object</code> in Python, so thought of writing a small post on it.</p>

<p>Looking indepth, one may get the impression that this is more of a chicked-egg problem, but I&#8217;ll give an overall view of this.</p>

<pre><code>- An object is basically an instance of type
- type is an instance of type itself
- object is the subclass of all other objects
- a type is an instance of object itself
</code></pre>

<p>So in a way, you have only two objects in Python, types and non-types.</p>

<p><em><strong>Note</strong>: <code>type</code> can also be called <code>class</code> from Python >= 2.3</em></p>

<p>Well there you go. It wasn&#8217;t confusing now, was it ? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Pylibmc in Ubuntu]]></title>
    <link href="http://kirang89.github.com/blog/2013/01/24/installing-pylibmc-in-ubuntu/"/>
    <updated>2013-01-24T15:54:00+05:30</updated>
    <id>http://kirang89.github.com/blog/2013/01/24/installing-pylibmc-in-ubuntu</id>
    <content type="html"><![CDATA[<p>Before you install Pylibmc on your machine, there are a few dependencies that you need to take care of, so as to ensure a successful installation.</p>

<h2>Install python-dev</h2>

<pre><code>sudo apt-get install python-dev</code></pre>


<h2>Install libmemcached</h2>

<pre><code>sudo apt-get install libmemcached-dev</code></pre>


<p>Now you can successfully install <code>pylibmc</code> using <code>pip</code></p>

<h2>Install pylibmc</h2>

<pre><code>sudo pip install pylibmc</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uploading your jar to Maven Central]]></title>
    <link href="http://kirang89.github.com/blog/2013/01/20/uploading-your-jar-to-maven-central/"/>
    <updated>2013-01-20T19:23:00+05:30</updated>
    <id>http://kirang89.github.com/blog/2013/01/20/uploading-your-jar-to-maven-central</id>
    <content type="html"><![CDATA[<h2>Public Repo Creation</h2>

<ul>
<li><p>Create a Sonatype Repo which can be used for the deployment of the project jars. For this, follow <strong>Step 2</strong> and <strong>3</strong> from <a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-2.Signup">here</a>.</p></li>
<li><p>After u create the JIRA ticket, the guys responsible will get back to you with all the relevant details including the repositories to which you can deploy</p></li>
<li><p>Now we have a snapshot and release repo ready. So let&#8217;s ready our project for deployment.</p></li>
</ul>


<h2>Changes in your POM file</h2>

<ul>
<li>Make sure you have all these elements in your POM file</li>
</ul>


<figure class='code'><figcaption><span>POM elements </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;modelVersion> 
</span><span class='line'>  &lt;groupId>
</span><span class='line'>  &lt;artifactId>
</span><span class='line'>  &lt;version>
</span><span class='line'>  &lt;packaging>
</span><span class='line'>  &lt;name>
</span><span class='line'>  &lt;description>
</span><span class='line'>  &lt;url>
</span><span class='line'>  &lt;licenses>
</span><span class='line'>  &lt;scm>&lt;url>
</span><span class='line'>  &lt;scm>&lt;connection>
</span><span class='line'>  &lt;developers></span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Make sure that you append <strong>-SNAPSHOT</strong> to <code>&lt;version&gt;</code>. Don&#8217;t worry, when your project jar is being deployed to the release repo, the &#8220;-SNAPSHOT&#8221; string will be removed.</p></li>
<li><p>Add the following xml snippets in your POM</p></li>
</ul>


<figure class='code'><figcaption><span>Add these under <build> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;plugins>
</span><span class='line'>  &lt;plugin>
</span><span class='line'>      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>      &lt;artifactId>maven-compiler-plugin&lt;/artifactId>
</span><span class='line'>      &lt;version>2.3.2&lt;/version>
</span><span class='line'>      &lt;configuration>
</span><span class='line'>          &lt;source>${java.version}&lt;/source>
</span><span class='line'>          &lt;target>${java.version}&lt;/target>
</span><span class='line'>      &lt;/configuration>
</span><span class='line'>  &lt;/plugin>
</span><span class='line'>  &lt;plugin>
</span><span class='line'>      &lt;artifactId>maven-assembly-plugin&lt;/artifactId>
</span><span class='line'>      &lt;version>2.3&lt;/version>
</span><span class='line'>      &lt;configuration>
</span><span class='line'>          &lt;descriptorRefs>
</span><span class='line'>              &lt;descriptorRef>jar-with-dependencies&lt;/descriptorRef>
</span><span class='line'>          &lt;/descriptorRefs>
</span><span class='line'>      &lt;/configuration>
</span><span class='line'>      &lt;executions>
</span><span class='line'>          &lt;execution>
</span><span class='line'>              &lt;phase>package&lt;/phase>
</span><span class='line'>              &lt;goals>
</span><span class='line'>                  &lt;goal>single&lt;/goal>
</span><span class='line'>              &lt;/goals>
</span><span class='line'>          &lt;/execution>
</span><span class='line'>      &lt;/executions>
</span><span class='line'>  &lt;/plugin>
</span><span class='line'>  &lt;plugin>
</span><span class='line'>      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>      &lt;artifactId>maven-source-plugin&lt;/artifactId>
</span><span class='line'>      &lt;version>2.1.2&lt;/version>
</span><span class='line'>      &lt;executions>
</span><span class='line'>          &lt;execution>
</span><span class='line'>              &lt;id>attach-sources&lt;/id>
</span><span class='line'>              &lt;goals>
</span><span class='line'>                  &lt;goal>jar&lt;/goal>
</span><span class='line'>              &lt;/goals>
</span><span class='line'>          &lt;/execution>
</span><span class='line'>      &lt;/executions>
</span><span class='line'>  &lt;/plugin>
</span><span class='line'>  &lt;plugin>
</span><span class='line'>      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>      &lt;artifactId>maven-javadoc-plugin&lt;/artifactId>
</span><span class='line'>      &lt;configuration>
</span><span class='line'>          &lt;quiet>true&lt;/quiet>
</span><span class='line'>          &lt;nonavbar>true&lt;/nonavbar>
</span><span class='line'>          &lt;notree>true&lt;/notree>
</span><span class='line'>          &lt;nocomment>true&lt;/nocomment>
</span><span class='line'>          &lt;nohelp>true&lt;/nohelp>
</span><span class='line'>
</span><span class='line'>      &lt;/configuration>
</span><span class='line'>      &lt;executions>
</span><span class='line'>          &lt;execution>
</span><span class='line'>              &lt;id>attach-javadocs&lt;/id>
</span><span class='line'>              &lt;goals>
</span><span class='line'>                  &lt;goal>jar&lt;/goal>
</span><span class='line'>              &lt;/goals>
</span><span class='line'>          &lt;/execution>
</span><span class='line'>      &lt;/executions>
</span><span class='line'>  &lt;/plugin>
</span><span class='line'>  &lt;plugin>
</span><span class='line'>      &lt;groupId>org.apache.maven.plugins&lt;/groupId>
</span><span class='line'>      &lt;artifactId>maven-gpg-plugin&lt;/artifactId>
</span><span class='line'>      &lt;executions>
</span><span class='line'>          &lt;execution>
</span><span class='line'>              &lt;id>sign-artifacts&lt;/id>
</span><span class='line'>              &lt;phase>verify&lt;/phase>
</span><span class='line'>              &lt;goals>
</span><span class='line'>                  &lt;goal>sign&lt;/goal>
</span><span class='line'>              &lt;/goals>
</span><span class='line'>          &lt;/execution>
</span><span class='line'>      &lt;/executions>
</span><span class='line'>  &lt;/plugin>
</span><span class='line'>&lt;/plugins></span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add the distribution info like this:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;distributionManagement>
</span><span class='line'>  &lt;!-- Repository for snapshots -->
</span><span class='line'>  &lt;repository>
</span><span class='line'>      &lt;id>sonatype-nexus-snapshots&lt;/id>
</span><span class='line'>      &lt;url>https://oss.sonatype.org/content/repositories/snapshots&lt;/url>
</span><span class='line'>  &lt;/repository>
</span><span class='line'>  &lt;!-- Repository for releases -->
</span><span class='line'>  &lt;repository>
</span><span class='line'>      &lt;id>nexus-releases&lt;/id>
</span><span class='line'>      &lt;name>Nexus Release Repository&lt;/name>
</span><span class='line'>      &lt;url>http://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url>
</span><span class='line'>  &lt;/repository>
</span><span class='line'>&lt;/distributionManagement></span></code></pre></td></tr></table></div></figure>


<ul>
<li>Add the Sonatype parent info:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;parent>
</span><span class='line'>  &lt;groupId>org.sonatype.oss&lt;/groupId>
</span><span class='line'>  &lt;artifactId>oss-parent&lt;/artifactId>
</span><span class='line'>  &lt;version>7&lt;/version>
</span><span class='line'>&lt;/parent></span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a file <code>settings.xml</code> inside your local Maven repository folder (which is usually <code>~/.m2/</code> ), and add the following xml snippet</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;settings>
</span><span class='line'>  &lt;servers>
</span><span class='line'>      &lt;server>
</span><span class='line'>          &lt;id>sonatype-nexus-snapshots&lt;/id>
</span><span class='line'>          &lt;username>your username&lt;/username>
</span><span class='line'>          &lt;password>your password&lt;/password>
</span><span class='line'>      &lt;/server>
</span><span class='line'>      &lt;server>
</span><span class='line'>          &lt;id>nexus-releases&lt;/id>
</span><span class='line'>          &lt;username>your username&lt;/username>
</span><span class='line'>          &lt;password>your password&lt;/password>
</span><span class='line'>      &lt;/server>
</span><span class='line'>  &lt;/servers>
</span><span class='line'>  &lt;profiles>
</span><span class='line'>      &lt;profile>
</span><span class='line'>          &lt;id>gpg&lt;/id>
</span><span class='line'>          &lt;properties>
</span><span class='line'>              &lt;gpg.passphrase>your passphrase&lt;/gpg.passphrase>
</span><span class='line'>              &lt;gpg.keyname>your pgp key&lt;/gpg.keyname>
</span><span class='line'>          &lt;/properties>
</span><span class='line'>      &lt;/profile>
</span><span class='line'>  &lt;/profiles>
</span><span class='line'>&lt;/settings></span></code></pre></td></tr></table></div></figure>


<p>The username and password refers to the one you used for creating the jira account earlier.</p>

<h2>Using Public key to sign artifacts</h2>

<ul>
<li><p>You can sign your project jars using pgp signatures by following the instructions <a href="https://docs.sonatype.org/display/Repository/How+To+Generate+PGP+Signatures+With+Maven">here</a></p></li>
<li><p>Make sure to upload your key to the public keyserver as mentioned in the link above.</p></li>
<li><p>The <code>maven-gpg-plugin</code> plugin above will help to sign all your project jars with a pgp signature.</p></li>
</ul>


<h2>Upload to Repository</h2>

<ul>
<li><p>Before you proceed, make sure to push all the changes made locally to your SCM. <strong>This is a very important step</strong>.</p></li>
<li><p>Create a <a href="https://help.github.com/articles/generating-ssh-keys">public SSH key in github</a>, if you don&#8217;t have one. If not created, you will face the following error while uploading</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Permission denied (publickey). error.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>To upload your project to the snapshot repository simply run</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn clean deploy</span></code></pre></td></tr></table></div></figure>


<ul>
<li>To upload your project for staging before the actual release, run the commands below</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//Cleanup before releasing 
</span><span class='line'> mvn release:clean
</span><span class='line'>
</span><span class='line'>//Preparing for the release
</span><span class='line'> mvn release:prepare</span></code></pre></td></tr></table></div></figure>


<ul>
<li>If your project was prepared successfully, use the following command to upload the jars to the staging repository.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn release:perform</span></code></pre></td></tr></table></div></figure>


<p>If everything ran well, you have now successfully deployed your project artifacts to the sonatype staging repository.</p>

<h2>Promote staged project to Maven repo</h2>

<ul>
<li>Login to <a href="https://oss.sonatype.org/">Sonatype Repository browser</a></li>
<li>Follow the instructions given <a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide#SonatypeOSSMavenRepositoryUsageGuide-8a.ReleaseIt">here</a></li>
<li>Before you release your jars into Maven Central, make sure to download and test them locally.</li>
<li><strong>Do not release your artifacts without ensuring that they work as expected</strong></li>
</ul>


<p>Once your staged release has been promoted and synced to the Central Repo, do not forget to close the JIRA ticket you created in the beginning.</p>

<p>That&#8217;s it. You&#8217;re done ! Go and chillout :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JVM Profiling Disclosures]]></title>
    <link href="http://kirang89.github.com/blog/2012/11/30/jvm-profiling-and-what-the-terms-mean/"/>
    <updated>2012-11-30T22:46:00+05:30</updated>
    <id>http://kirang89.github.com/blog/2012/11/30/jvm-profiling-and-what-the-terms-mean</id>
    <content type="html"><![CDATA[<p>Well, I&#8217;ve never actually given importance to the term &#8221;<em>profiling</em>&#8221; till a few days ago. The real deal was that I was just too lazy to actually run a profiler and then to try interpret the stats and hopefully find the bottleneck in the code. So to avoid all this hassle, I tried to be careful while writing code to make sure I don&#8217;t leave any open doors for memory leaks or poor CPU utilization.</p>

<p>But a few days back, I stumbled into a performance issue in my code at work, leaving both me and my project lead puzzled about the culprit. Atlast desperation lead us to setup YourKit profiling in our server to have a peak under the hood of the JVM. And in the process, we happened to learn some new terms and functionalities of the profiler and I must say that I&#8217;m slowly beginning to like the idea of profiling code. I was really surprised at what we could learn about our code just by looking at the profiler stats. So here below, I&#8217;ve merged in some of our learnings along the whole process.</p>

<h3>JVM Memory Structure</h3>

<p> It&#8217;s important to first understand the structure of the JVM memory itself. Simply put:</p>

<p><em>JVM Memory = Heap Memory + Non-Heap Memory + Other (JVM code itself, JVM internal structures, loaded profiler agent code and data, etc.)</em></p>

<h3>Profiling Terms</h3>

<p>Next, lets look at a few terms you need to know in order to make some sense out of all those weird graphs.</p>

<ul>
<li><em>Heap Memory</em> - Stores Java objects</li>
<li><em>Non-Heap memory</em> -  Stores per-class structures and other meta-data</li>
<li><em>Stack Memory</em> - Java only stores primitives on the stack. Stack values only exist within the scope in which they were created. Java objects are created on the heap, and only references (which in turn are primitives) are passed around on the stack.</li>
<li><em>Allocated Memory</em> - All memory that is allocated by the JVM</li>
<li><em>Used Memory</em> - Amount of memory that is actually in use</li>
<li><em>Eden</em> - Objects that are newly created reside here</li>
<li><em>S1(Survivor Space 1) or S2</em> - All objects that survive a GC cycle go here</li>
<li><em>Young Generation</em> - Eden + S1 + S2 section of Heap memory</li>
<li><p><em>Old Gen Space</em> - Objects that survive a fixed number of GC cycles go here</p>

<p> Ex: Singletons, Cached Objects and other application global data</p></li>
<li><em>Shallow Size(object)</em> -  Amount of allocated memory to store the object</li>
<li><em>Retained Size(object)</em> - Shallow size of object under consideration  + Shallow size of other objects that can be directly or indirectly accessed from this object</li>
</ul>


<h3>Things to watch out for while profiling</h3>

<ul>
<li>In a typical application there will be less variation inside the Old Gen space.</li>
<li>If the Old Gen space grows linearly with time even after the GC cycle, it would lead to a <code>OutOfMemoryError</code>. This occurs mainly due to JVM memory space depletion (Java Heap, Native Heap, etc.). This might be a indication of a memory leak inside the code.</li>
</ul>


<p>The <code>OutOfMemoryError</code> mainly occurs due to the following:</p>

<ul>
<li>Lack of understanding of current JVM utilization</li>
<li>Inappropriate JVM GC policy used. (Monitor JVM GC closely. Enable <code>verbose</code> GC option and analyse the data)</li>
<li>Lack of performance and load testing</li>
</ul>


<p>From the above, you probably would understand most of the important stats when you look into your profiler output next time. Now comes the important question</p>

<blockquote><p>How do I generally find/prevent bottlenecks in my code ?</p></blockquote>

<p>Well, I&#8217;ve tried to provide a few ideas below:</p>

<ul>
<li>Understand your application&#8217;s memory footprint</li>
<li>Provide Connection Timeouts for any sort of communication API that you use.</li>
<li>Cache data whereever possible to avoid more I/O operations on disk</li>
<li>Monitor your threads closely to make sure there aren&#8217;t any bottlenecks or, well Deadlocks (<em>gulp</em>)</li>
<li>Monitor Network Latencies. They are the hidden culprits of many performance problems.</li>
<li>Implement application logging. This will help you to internally monitor the performance issues and hotspots in your code.</li>
<li>Use Client JVM for development and Server JVM in production. Most people ignore this change. Even I did so. That was mainly because I never knew the difference between the JVM&#8217;s. The Server JVM does heavy optimization of your code to increase performance and reduce memory and CPU footprints, in production.</li>
<li>Increase JVM Heap by specifying <code>-Xms</code> and <code>-Xmx</code> while running your application</li>
<li>Analyse what&#8217;s happening under the hood in the heap, using <code>jmap</code> and <code>jhat</code> (Haven&#8217;t really tried this out)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Download a csv in your Play! framework application]]></title>
    <link href="http://kirang89.github.com/blog/2012/10/03/download-a-csv-in-your-play-framework-application/"/>
    <updated>2012-10-03T02:35:00+05:30</updated>
    <id>http://kirang89.github.com/blog/2012/10/03/download-a-csv-in-your-play-framework-application</id>
    <content type="html"><![CDATA[<p>In this post, I&#8217;ll share a simple way to download CSV files in Play Framework. This is especially useful, if you want to export out some reports or analytics data for offline use. So let’s get started.</p>

<ol>
<li>First create a new Play! application (I’m skipping all this for the sake of sticking to the point)</li>
<li>Have a seperate controller/method which handles the generation of CSV files.</li>
<li>In that controller add the following code:</li>
</ol>


<figure class='code'><figcaption><span>CSV download snippet </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>response.contentType = "text/csv";
</span><span class='line'>
</span><span class='line'>response.setHeader("Content-Disposition", "attachment;filename="" + &lt;filename> +".csv" + """);
</span><span class='line'>
</span><span class='line'>response.writeChunk(&lt;header>); 
</span><span class='line'>
</span><span class='line'>response.writeChunk("\n"); 
</span><span class='line'>
</span><span class='line'>response.writeChunk(&lt;content>);</span></code></pre></td></tr></table></div></figure>


<p><strong><u>Note</u>:</strong> Remember to separate your content with a “<strong>,</strong>” so that it will be columnised in the file</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://kirang89.github.com/blog/2012/10/03/hello-world/"/>
    <updated>2012-10-03T02:04:00+05:30</updated>
    <id>http://kirang89.github.com/blog/2012/10/03/hello-world</id>
    <content type="html"><![CDATA[<p>This is my first post, so thought of starting up with the most widely used programming lingo: Hello World. In this blog, I&#8217;ll share my hacks,ideas and even mistakes :)</p>
]]></content>
  </entry>
  
</feed>
